
--
-- Provides distincts IDs calls after calls
-- @return int
--
local id = 0
function getID()
  id = id + 1
  return id
end

--
-- Assign an ID to every node in the ast
-- 
-- Assing an id to every table and sub-table of the given one,
-- exept the ones named "lineinfo"
--
-- @param ADT to index
--
local idToNode = {}
local nodeToId = {}
function index( ast )
  -- Flush previous indexes
  idToNode = {}
  nodeToId = {}
  doIndex( ast )
end
function doIndex( adt )

  local function childNodes( ast )
    nodes = {}
    for k, v in ipairs( ast ) do
      if ( type(v) == "table" ) then
	nodes[ #nodes + 1 ] = v
      end
    end
    return nodes
  end

  -- Index node
  local id = getID()
  idToNode[ id ] = adt
  nodeToId[ adt ] = id

  -- Index child nodes
  for k,v in ipairs( childNodes(adt) )do
    if ( type(v) == "table" ) then
      doIndex( v )
    end
  end
end

--
-- Retrurn children of a node
--
-- @param  int	 ID of node to parse
-- @return table Child nodes
-- @return int	 Count of child nodes
--
function children( id )
  local child = {}
  for  k,v in ipairs( idToNode[ id ] ) do
    if ( type(v) == "table" and k ~= "lineinfo" ) then
      child[ #child + 1 ] = nodeToId[ v ]
    end
  end
  return child, #child
end

--
-- Lists key and value of asked node, exept tables
--
-- @param ast	Tree to parse
-- @param id	ID of node to describe in tree
--
function describe(ast, id)
  -- Use root if no index is given
  local node = id ~=nil and find_node(ast,id) or ast

  -- Make sure we deal with an array
  assert( type(node) == "table" )
  for key,value in pairs( node ) do
   if ( type(value) ~= "table" ) then
      print( key )
      print( value )
   end
  end
end
-- 
-- Get node's tag
--
-- @param  Number ID of node of requested tag
-- @return String
--
function getTag( id )
  return idToNode[id]["tag"]
end

function getNode( id )
  return idToNode[ id ]
end

-- 
-- Get node's value
--
-- @param int ID of requested node
-- 
function getValue( id )
  return idToNode[ id ][ 1 ]
end

-- 
-- Get node's start position in source
--
-- @param int ID of requested node
-- 
function getStart( id )
  return tonumber(idToNode[ id ][ 'lineinfo' ]['first'][3])
end

-- 
-- Get node's end position in source
--
-- @param int ID of requested node
-- 
function getEnd( id )
  assert (
    type(idToNode[ id ].lineinfo) == "table",
    "No line info for node "..id
  )
  return tonumber(idToNode[ id ][ 'lineinfo' ]['last'][3])
end

--
-- Indicates if line informations are available for a node
-- @param id	ID of requested node
-- 
function hasLineInfo( id )
  return type(idToNode[ id ].lineinfo) == "table"
end

